{"ast":null,"code":"////////////////////////// GLOBAL VARIABLES //////////////////////\nvar NUMBER_VOWS = 10; ///////////////////////////////////////////////////////////\n\nfunction weight(rank) {\n  return Math.pow(rank + 1, 2) - 1;\n} ///////////////////////////FUNCTIONS TO CHECK VOW VALIDITY///////////////////////\n\n\nfunction timeToMinutes(time) {\n  var hours = 0;\n  var minutes = 0;\n  var split = time.split('');\n\n  if (split.length === 4) {\n    hours = parseInt(split[0]);\n    minutes = parseInt(split[2] + split[3]);\n  } else if (split.length === 5) {\n    hours = parseInt(split[0] + split[1]);\n    minutes = parseInt(split[3] + split[4]);\n  }\n\n  return minutes + 60 * hours;\n}\n\nfunction schedulesAreOverlapping(schedule1, schedule2) {\n  var begin1 = timeToMinutes(schedule1.begin);\n  var end1 = timeToMinutes(schedule1.end);\n  var begin2 = timeToMinutes(schedule2.begin);\n  var end2 = timeToMinutes(schedule2.end);\n  return schedule1.day === schedule2.day && schedule1.day !== \"hors-cr√©neaux\" && (end2 - begin1) * (begin2 - end1) < 0;\n}\n\nfunction coursesAreOverlapping(course1, course2, schedules) {\n  var are_overlapping = false;\n  var schedules1 = course1.creneaux.map(function (schedule_index) {\n    return schedules[schedule_index];\n  });\n  var schedules2 = course2.creneaux.map(function (schedule_index) {\n    return schedules[schedule_index];\n  });\n\n  for (var i = 0; i < schedules1.length; i++) {\n    for (var j = 0; j < schedules2.length; j++) {\n      are_overlapping = are_overlapping || schedulesAreOverlapping(schedules1[i], schedules2[j]);\n    }\n  }\n\n  return are_overlapping;\n}\n\nfunction vowIsValid(vow, schedules) {\n  // checking for schedules compatibility \n  var list_courses = vow.list;\n\n  for (var i = 0; i < list_courses.length; i++) {\n    for (var j = i + 1; j < list_courses.length; j++) {\n      if (coursesAreOverlapping(list_courses[i], list_courses[j], schedules)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n} /////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction generate_combinations(l, n) {\n  var k = l.length;\n  var result = [];\n\n  for (var i = 0; i < k; i++) {\n    if (n === 1) {\n      result.push({\n        \"list\": [l[i]],\n        \"weight\": weight(i)\n      });\n    } else {\n      for (var j = i + 1; j < k; j++) {\n        if (n === 2) {\n          result.push({\n            \"list\": [l[i], l[j]],\n            \"weight\": weight(i) + weight(j)\n          });\n        } else {\n          for (var o = j + 1; o < k; o++) {\n            if (n === 3) {\n              result.push({\n                \"list\": [l[i], l[j], l[o]],\n                \"weight\": weight(i) + weight(j) + weight(o)\n              });\n            } else {\n              for (var p = o + 1; p < k; p++) {\n                if (n === 4) {\n                  result.push({\n                    \"list\": [l[i], l[j], l[o], l[p]],\n                    \"weight\": weight(i) + weight(j) + weight(o) + weight(p)\n                  });\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction mix(result_1, result_2) {\n  var result = [];\n\n  for (var i = 0; i < Object.keys(result_1).length; i++) {\n    for (var j = 0; j < Object.keys(result_2).length; j++) {\n      result.push({\n        \"list\": result_1[i].list.concat(result_2[j].list),\n        \"weight\": result_1[i].weight + result_2[j].weight\n      });\n    }\n  }\n\n  result.sort(function (a, b) {\n    return a.weight - b.weight;\n  });\n  return result;\n}\n\nfunction parse(json_file_name) {\n  var fs = require('fs');\n\n  var fileContents = fs.readFileSync(json_file_name, 'utf8');\n  var data = {};\n\n  try {\n    data = JSON.parse(fileContents);\n  } catch (err) {\n    console.error(err);\n  }\n\n  var result = [];\n\n  for (var i_student = 0; i_student < data.length; i_student++) {\n    result.push({});\n    var student_data = data[i_student];\n    result[i_student].name = student_data.name;\n    var wanted_organization_unparsed = student_data.wanted_organization.split(\" \");\n    var wanted_organization = {};\n    var nb_languages = 0;\n\n    for (var i_lang = 0; i_lang < wanted_organization_unparsed.length; i_lang += 2) {\n      nb_languages += 1;\n      wanted_organization[wanted_organization_unparsed[i_lang]] = wanted_organization_unparsed[i_lang + 1];\n    }\n\n    var sortings_dic = {};\n    var languages_name = Object.keys(wanted_organization);\n\n    for (var _i_lang = 0; _i_lang < nb_languages; _i_lang++) {\n      sortings_dic[languages_name[_i_lang]] = student_data.sortings[_i_lang].course_ids.split(\" \");\n    }\n\n    if (nb_languages == 1) {\n      result[i_student].vows = generate_combinations(sortings_dic[languages_name[0]], parseInt(wanted_organization[languages_name[0]]));\n    } else {\n      result[i_student].vows = mix(generate_combinations(sortings_dic[languages_name[0]], parseInt(wanted_organization[languages_name[0]])), generate_combinations(sortings_dic[languages_name[1]], parseInt(wanted_organization[languages_name[1]])));\n    }\n  }\n\n  return result;\n}\n\nfunction vowGenerator(number_english_courses, number_other_courses, ranking_english_courses, ranking_other_courses, schedules) {\n  var raw_vow_list = mix(generate_combinations(ranking_english_courses, number_english_courses), generate_combinations(ranking_other_courses, number_other_courses));\n  var checked_vow_list = raw_vow_list.filter(function (vow) {\n    return vowIsValid(vow, schedules);\n  });\n  checked_vow_list.sort(function (vow1, vow2) {\n    return vow2.weight - vow1.weight;\n  });\n  return checked_vow_list; //.slice(0, Math.min(NUMBER_VOWS, checked_vow_list.length));\n}\n/*const vows = parse('data_example.json')\nfor (let i=0; i<vows.length;i++){\n  console.log(vows[i].name)\n  console.log(vows[i].vows)\n}*/\n\n\nexport default vowGenerator;","map":{"version":3,"sources":["/home/luca/Documents/ENPC-2A/Projet-departement/langage-allocation2/language-allocation/front/src/VowGenerator.js"],"names":["NUMBER_VOWS","weight","rank","timeToMinutes","time","hours","minutes","split","length","parseInt","schedulesAreOverlapping","schedule1","schedule2","begin1","begin","end1","end","begin2","end2","day","coursesAreOverlapping","course1","course2","schedules","are_overlapping","schedules1","creneaux","map","schedule_index","schedules2","i","j","vowIsValid","vow","list_courses","list","generate_combinations","l","n","k","result","push","o","p","mix","result_1","result_2","Object","keys","concat","sort","a","b","parse","json_file_name","fs","require","fileContents","readFileSync","data","JSON","err","console","error","i_student","student_data","name","wanted_organization_unparsed","wanted_organization","nb_languages","i_lang","sortings_dic","languages_name","sortings","course_ids","vows","vowGenerator","number_english_courses","number_other_courses","ranking_english_courses","ranking_other_courses","raw_vow_list","checked_vow_list","filter","vow1","vow2"],"mappings":"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","sourcesContent":["////////////////////////// GLOBAL VARIABLES //////////////////////\n\nlet NUMBER_VOWS=10;\n\n///////////////////////////////////////////////////////////\n\nfunction weight(rank){\n    return (rank+1)**2-1\n  }\n\n///////////////////////////FUNCTIONS TO CHECK VOW VALIDITY///////////////////////\n\nfunction timeToMinutes(time){\n    let hours=0;\n    let minutes=0;\n    let split=time.split('');\n    if(split.length===4){\n        hours=parseInt(split[0]);\n        minutes=parseInt(split[2]+split[3]);\n    } else if(split.length===5){\n        hours=parseInt(split[0]+split[1]);\n        minutes=parseInt(split[3]+split[4]);\n    }\n    return minutes+60*hours\n}\n\nfunction schedulesAreOverlapping(schedule1, schedule2){\n    let begin1=timeToMinutes(schedule1.begin);\n    let end1=timeToMinutes(schedule1.end);\n    let begin2=timeToMinutes(schedule2.begin);\n    let end2=timeToMinutes(schedule2.end);\n    return (schedule1.day===schedule2.day)&&(schedule1.day!==\"hors-cr√©neaux\")&&((end2-begin1)*(begin2-end1)<0);\n}\n\nfunction coursesAreOverlapping(course1, course2, schedules){\n    let are_overlapping=false;\n    let schedules1=course1.creneaux.map(schedule_index=>schedules[schedule_index]);\n    let schedules2=course2.creneaux.map(schedule_index=>schedules[schedule_index]);\n    for(let i=0; i<schedules1.length; i++){\n        for(let j=0; j<schedules2.length; j++){\n            are_overlapping=are_overlapping||(schedulesAreOverlapping(schedules1[i], schedules2[j]));\n        }\n    }\n    return are_overlapping;\n}\n\nfunction vowIsValid(vow, schedules){\n    // checking for schedules compatibility \n    let list_courses=vow.list;\n    for( let i=0; i<list_courses.length; i++){\n        for(let j =i+1; j<list_courses.length; j++){\n            if(coursesAreOverlapping(list_courses[i], list_courses[j], schedules)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n \n  function generate_combinations(l, n){\n    let k = l.length\n    let result = []\n    for (let i=0; i<k; i++){\n      if (n===1){\n        result.push({\"list\":[l[i]],\"weight\":weight(i)})\n      }\n      else{\n        for (let j=i+1; j<k; j++){\n          if (n===2){\n            result.push({\"list\":[l[i],l[j]],\"weight\":weight(i)+weight(j)})\n          }\n          else{\n            for (let o=j+1; o<k; o++){\n              if (n===3){\n                result.push({\"list\":[l[i],l[j],l[o]],\"weight\":weight(i)+weight(j)+weight(o)})\n              }\n              else{\n                for (let p=o+1; p<k; p++){\n                  if (n===4){\n                    result.push({\"list\":[l[i],l[j],l[o],l[p]],\"weight\":weight(i)+weight(j)+weight(o)+weight(p)})\n                  }\n              }\n          }\n        }\n      }\n    }\n    }}\n    return result\n  }\n  \n  function mix(result_1, result_2){\n    let result=[]\n    for (let i= 0; i<Object.keys(result_1).length; i++){\n      for (let j = 0; j<Object.keys(result_2).length; j++){\n        result.push({\"list\": result_1[i].list.concat(result_2[j].list), \"weight\": result_1[i].weight+result_2[j].weight})\n      }\n    }\n    result.sort((a,b) => a.weight-b.weight)\n    return result\n  }\n  \n  function parse(json_file_name){\n    const fs = require('fs');\n    const fileContents = fs.readFileSync(json_file_name, 'utf8');\n    let data = {}\n    try {\n      data = JSON.parse(fileContents)\n    } catch(err) {\n      console.error(err);\n    }\n    let result = []\n    for (let i_student=0; i_student<data.length; i_student++){\n      result.push({})\n      const student_data = data[i_student]\n      result[i_student].name = student_data.name\n      const wanted_organization_unparsed = student_data.wanted_organization.split(\" \")\n      let wanted_organization = {}\n      let nb_languages = 0\n      for (let i_lang = 0; i_lang< wanted_organization_unparsed.length; i_lang+=2){\n        nb_languages += 1\n        wanted_organization[wanted_organization_unparsed[i_lang]] = wanted_organization_unparsed[i_lang+1]\n      }\n      let sortings_dic = {}\n      let languages_name = Object.keys(wanted_organization)\n      for (let i_lang = 0; i_lang<nb_languages; i_lang++){\n        sortings_dic[languages_name[i_lang]] = student_data.sortings[i_lang].course_ids.split(\" \")\n  \n      }\n      if (nb_languages == 1){\n        result[i_student].vows = generate_combinations(sortings_dic[languages_name[0]], parseInt(wanted_organization[languages_name[0]]))\n      }\n      else{\n        result[i_student].vows = mix(generate_combinations(sortings_dic[languages_name[0]], parseInt(wanted_organization[languages_name[0]])),generate_combinations(sortings_dic[languages_name[1]], parseInt(wanted_organization[languages_name[1]])))\n      }\n      }\n      return result\n  }\n\n  function vowGenerator(number_english_courses, number_other_courses, ranking_english_courses, ranking_other_courses, schedules){\n    let raw_vow_list=mix(generate_combinations(ranking_english_courses, number_english_courses), generate_combinations(ranking_other_courses, number_other_courses))\n    let checked_vow_list=raw_vow_list.filter(vow=>{return vowIsValid(vow, schedules)})\n    checked_vow_list.sort((vow1, vow2)=>{return vow2.weight-vow1.weight});\n    return checked_vow_list//.slice(0, Math.min(NUMBER_VOWS, checked_vow_list.length));\n  }\n  \n  /*const vows = parse('data_example.json')\n  for (let i=0; i<vows.length;i++){\n    console.log(vows[i].name)\n    console.log(vows[i].vows)\n  }*/\n\n  export default vowGenerator;\n"]},"metadata":{},"sourceType":"module"}